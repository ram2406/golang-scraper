package main

/*
 #define PY_SSIZE_T_CLEAN
 #include <Python.h>

void print_str(char *s);

 static PyObject *
spam_system(PyObject *self, PyObject *args)
{
    const char *command;
    int sts;

    if (!PyArg_ParseTuple(args, "s", &command))
        return NULL;
    sts = system(command);
    return PyLong_FromLong(sts);
}
*/
import "C"
import (
	"fmt"
	"io/ioutil"
	"unsafe"

	"gopkg.in/yaml.v3"
)

// "C"


type ParserTransfromRule struct {
	Selector               string
	Mapping                string
	Attribute_Name         string
	Regex_Sub_Value        [2]string
	Children               []ParserTransfromRule
	Grouping               string
	Exception_on_not_found bool
}

type EtlConfig struct {
	Sources []struct  { 
		Name     string `yaml:"name"`
		Root_url string
		Menu     struct {
			Page_limit     int
			Cards_per_page int
			Default_url    string
			Page_url_sub   string
			First_page_url string

			Rules []ParserTransfromRule
		}

		Card struct {
			Rules []ParserTransfromRule
		}
	} `yaml:"sources"`
}

type Test struct {
	Test int `yaml:"test"`
	Test2 int `yaml:"test2"`
}

type Wrapper struct {
	bytes []byte
	err error
}

func (c *Wrapper) crt(bytes []byte, err error) {
	return 
}
func crt2(bytes []byte, err error) *Wrapper {
	return &Wrapper {
		bytes: bytes, err: err,
	}
}

func main10() {
	x := crt2(
		ioutil.ReadFile(`L:\dev\property_globber\aparts\dags\etl-config.yaml`),
	)
	
	// fn, err := filepath.Abs( `test.yml` )
	// yamlFile, err := ioutil.ReadFile(`test.yml`)

	if x.err != nil {
		panic(x.err)
	}

	var config EtlConfig
	// data := make(map[interface{}]interface{})
    err := yaml.Unmarshal(x.bytes, &config)
    if err != nil {
        panic(err)
    }

    fmt.Printf("Value: %#v\n", config.Sources[0].Menu.Rules[0])
		
}

func Print(s string) {
	cs := C.CString(s)
	defer C.free(unsafe.Pointer(cs))
	C.print_str(cs)
}


func main10() {
	Print(`Test my`)
}